{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./toaster.service\";\nimport * as i4 from \"@auth0/angular-jwt\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, http, toastr, jwtHelper) {\n      this.router = router;\n      this.http = http;\n      this.toastr = toastr;\n      this.jwtHelper = jwtHelper;\n      this.baseUrl = environment.base_url;\n    }\n    login(payload) {\n      localStorage.clear();\n      return this.http.post(this.baseUrl + '/login', payload).pipe(map(data => {\n        console.log('--------------------------', data);\n        if (!data.result.access_token) {\n          console.log('Got token', data.result.message);\n        } else {\n          this.decodedToken = this.jwtHelper.decodeToken(data.result.access_token);\n          return data;\n        }\n      }));\n    }\n    isAuthenticated() {\n      if (localStorage.getItem('access_token') != null) {\n        return !this.jwtHelper.isTokenExpired(localStorage.getItem('access_token'));\n      }\n      return false;\n    }\n    verifyToken() {\n      return this.http.post(this.baseUrl + '/validate_type_token', {\n        token: localStorage.getItem('access_token')\n      });\n    }\n    logMeOut() {\n      localStorage.clear();\n      this.router.navigateByUrl('/auth').then();\n    }\n    createUser(payload) {\n      // @ts-ignore\n      return this.http.post(this.baseUrl + '/register', payload);\n    }\n    // tslint:disable-next-line:adjacent-overload-signatures\n    getUsers(query) {\n      // @ts-ignore\n      return this.http.post(this.baseUrl + '/users', query);\n    }\n    forgotPassword(payload) {\n      return this.http.post(this.baseUrl + '/forgot_password', payload);\n    }\n    setPassword(payload) {\n      return this.http.post(this.baseUrl + '/set_password', payload);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ToasterService), i0.ɵɵinject(i4.JwtHelperService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}