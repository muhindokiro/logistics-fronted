{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport let IdlelogoutService = /*#__PURE__*/(() => {\n  class IdlelogoutService {\n    constructor(authService) {\n      this.authService = authService;\n      this.timeout = 60 * 10;\n      this.loggedOut = false;\n    }\n    confirmTimeout() {\n      const expTime = localStorage.getItem('_expiredTime9835983598fjgfskhkfksfhs');\n      const expiredTime = parseInt(expTime || '0', 10); // TODO: You changed the method here. Refer back if there's an error\n      if (expiredTime < Date.now() && this.authService.isAuthenticated()) {\n        // console.log('------------------------------logging out--------------------------');\n        this.authService.sessionTimeout();\n      }\n    }\n    resetTimer(onLogin) {\n      // console.log('------------------------------RESETING--------------------------');\n      this.loggedOut = false;\n      localStorage.setItem('_expiredTime9835983598fjgfskhkfksfhs', String(Date.now() + this.timeout * 1000));\n      clearInterval(this.timer);\n      this.timer = setInterval(() => {\n        this.confirmTimeout();\n      }, !onLogin ? 2000 : 60 * 10 * 1000);\n    }\n    clearTimeout() {\n      this.loggedOut = true;\n      clearInterval(this.timer);\n      this.authService.sessionTimeout();\n    }\n  }\n  IdlelogoutService.ɵfac = function IdlelogoutService_Factory(t) {\n    return new (t || IdlelogoutService)(i0.ɵɵinject(i1.AuthService));\n  };\n  IdlelogoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IdlelogoutService,\n    factory: IdlelogoutService.ɵfac,\n    providedIn: 'root'\n  });\n  return IdlelogoutService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}